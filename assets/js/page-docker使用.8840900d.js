(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{693:function(r,v,_){"use strict";_.r(v);var t=_(1),o=Object(t.a)({},(function(){var r=this,v=r.$createElement,_=r._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[_("h1",{attrs:{id:"docker简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#docker简介"}},[r._v("#")]),r._v(" Docker简介")]),r._v(" "),_("p",[r._v("Docker使用Google公司推出的Go语言开发实现，基于Linux内核的cgroup，namespace，以及OverlayFS类的Union FS等技术，对进程进行封装隔离，属于"),_("strong",[r._v("操作系统层面的虚拟化技术")]),r._v("。隔离的进程独立于宿主和其它的隔离进程，因此也称为"),_("strong",[r._v("容器")]),r._v("。")]),r._v(" "),_("p",[r._v("Docker在容器的基础上进一步进行封装，从文件系统、网络互联到进程隔离等，极大简化了容器的创建和维护，使得Docker比虚拟机技术更为轻便、快捷。")]),r._v(" "),_("h1",{attrs:{id:"docker优势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#docker优势"}},[r._v("#")]),r._v(" Docker优势")]),r._v(" "),_("p",[r._v("（1）"),_("strong",[r._v("系统资源更高效的利用")])]),r._v(" "),_("p",[r._v("容易不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker对系统资源的利用率更高，一个相同配置的主机，往往可以运行更多数量的应用。")]),r._v(" "),_("p",[r._v("（2）"),_("strong",[r._v("启动时间更快")])]),r._v(" "),_("p",[r._v("Docker容器直接运行于宿主内核，无需启动完整的操作系统，可以做到秒、毫秒级的启动时间，大大缩短开发、测试和部署的时间。")]),r._v(" "),_("p",[r._v("（3）"),_("strong",[r._v("运行环境的一致性")])]),r._v(" "),_("p",[r._v("Docker提供除内核外完整的运行环境，确保应用运行环境的一致性。")]),r._v(" "),_("p",[r._v("（4）"),_("strong",[r._v("持续交付和部署")])]),r._v(" "),_("p",[r._v("对开发和运维（DevOps）人员来说，最希望的是一次创建或配置就能实现在任何地方正常运行。Docker通过定制"),_("strong",[r._v("应用镜像")]),r._v("来实现持续集成、交付和部署。开发人员通过"),_("strong",[r._v("Dockerfile")]),r._v("构建镜像，结合"),_("strong",[r._v("持续集成")]),r._v("（Continuous Integration）系统进行集成测试；运维人员直接在生产环境中快速部署该镜像，或者结合持续部署（Continuous Delivery/Deployment）系统进行自动部署。使用Dockerfile使得镜像构建透明化。")]),r._v(" "),_("p",[r._v("（5）"),_("strong",[r._v("迁移轻松")])]),r._v(" "),_("p",[r._v("Docker的使用确保了执行环境的一致性，便于多平台应用迁移。")]),r._v(" "),_("p",[r._v("（6）"),_("strong",[r._v("便于维护和扩展")])]),r._v(" "),_("p",[r._v("Docker使用分层存储及镜像技术，使得应用重复部分的复用更容易。Docker团队同各个开源项目团队一起维护了一大批高质量的官方镜像。")]),r._v(" "),_("h1",{attrs:{id:"基本概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[r._v("#")]),r._v(" 基本概念")]),r._v(" "),_("h2",{attrs:{id:"镜像-image"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#镜像-image"}},[r._v("#")]),r._v(" 镜像（Image）")]),r._v(" "),_("p",[r._v("Docker的镜像相当于一个"),_("strong",[r._v("root文件系统")]),r._v("（Linux内核启动后，会挂载root文件系统为其提供用户空间支持）。")]),r._v(" "),_("p",[r._v("Docker镜像除提供容器运行时"),_("strong",[r._v("所需的程序、库、资源、配置等文件")]),r._v("外，还包括运行时的一些"),_("strong",[r._v("配置")]),r._v("参数。镜像不包含任何动态数据，其内容在构建之后不会改变。")]),r._v(" "),_("h2",{attrs:{id:"分层存储"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分层存储"}},[r._v("#")]),r._v(" 分层存储")]),r._v(" "),_("p",[r._v("Docker镜像包含操作系统完整的root文件系统，其体积往往是庞大的，在Docker设计中充分利用**Union FS（联合文件系统）**技术，设计成分层存储架构，使得镜像并非是一个ISO那样的打包文件，实际是一组文件系统的组成（多层文件系统的联合）。")]),r._v(" "),_("blockquote",[_("p",[r._v("Union FS：2004年纽约州立石溪分校开发，可以把多个目录（分支）内容联合挂载到同一个目录下，目录的物理位置是分开的。Union FS运行只读和可读写目录，可以同时删除和增加内容。Union FS的一个典型应用可以把多张CD光盘合并成一个统一的光盘目录（归档）。")])]),r._v(" "),_("h2",{attrs:{id:"容器-container"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#容器-container"}},[r._v("#")]),r._v(" 容器（Container）")]),r._v(" "),_("p",[r._v("镜像和容器的关系，就像是面向对象程序设计中的"),_("strong",[r._v("类")]),r._v("和"),_("strong",[r._v("实例")]),r._v("，镜像是静态的定义，容器是镜像运行时的实体。")]),r._v(" "),_("p",[r._v("容器可以被创建、启动、停止、删除、暂停等。其实质是进程，与宿主执行的进程不同的是，容器进程运行属于自己的独立命名空间，因此容器可以拥有自己的root文件系统、网络配置、进程空间、用户ID空间等。")]),r._v(" "),_("p",[r._v("容器内的进程是运行在一个隔离的环境，独立于宿主系统。这使得容器封装的应用比直接在宿主运行更安全。")]),r._v(" "),_("blockquote",[_("p",[r._v("容器和虚拟机是非常相似的资源虚拟化技术。")]),r._v(" "),_("p",[r._v("虚拟化是一个过程，将RAM、CPU、磁盘或网络等系统单一资源虚拟化成多个资源。")]),r._v(" "),_("p",[r._v("虚拟机将整个计算机虚拟化到硬件层，容器只虚拟化操作系统级别以上的软件层。")])]),r._v(" "),_("h2",{attrs:{id:"仓库-repository"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#仓库-repository"}},[r._v("#")]),r._v(" 仓库（Repository）")]),r._v(" "),_("p",[r._v("镜像构建完成后，可以很容易在当前宿主机上运行，但如果需要在其它服务器上使用该镜像，需要一个集中的存储、分发镜像的服务，即"),_("strong",[r._v("Docker Registry")]),r._v("。")]),r._v(" "),_("p",[r._v("一个Docker Registry可以包含多个"),_("strong",[r._v("仓库")]),r._v("；每一个仓库可以包含多个"),_("strong",[r._v("标签（tag）")]),r._v("；每一个标签对应一个镜像。")]),r._v(" "),_("p",[r._v("通常，一个仓库包含同一个软件不同版本的镜像，标签常用于对应该软件的各个版本。通过"),_("code",[r._v("<仓库名>:<标签>")]),r._v("格式指定具体是这个软件哪个版本的镜像。如果不指定，则以"),_("code",[r._v("latest")]),r._v("作为默认标签。")]),r._v(" "),_("blockquote",[_("p",[r._v("以Ubuntu镜像为例，ubuntu是仓库名，包含不同版本的标签，如16.04，18.04等。")])]),r._v(" "),_("p",[r._v("仓库名经常以"),_("strong",[r._v("两段式")]),r._v("路径出现，如"),_("code",[r._v("jwilder/nginx-proxy")]),r._v("，前者往往意味着Docker Registry多用户环境下的用户名，后者是对应的软件名，并非绝对。")]),r._v(" "),_("h2",{attrs:{id:"docker-registry服务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#docker-registry服务"}},[r._v("#")]),r._v(" Docker Registry服务")]),r._v(" "),_("p",[_("strong",[r._v("公开服务")])]),r._v(" "),_("p",[r._v("开发给用户使用，允许用户管理镜像的Registry服务。常用的Registry公开服务包括官方的Docker Hub（默认的Registry），Red Hat的Quary.io，GitHub推出的ghcr.io等。")]),r._v(" "),_("p",[r._v("国内访问通过阿里云加速器等，可以更快的直接从网内地址下载Docker Hub的镜像。")]),r._v(" "),_("p",[_("strong",[r._v("私有服务")])]),r._v(" "),_("p",[r._v("用户可以在本地搭建私有的Docker Registry。")]),r._v(" "),_("p",[_("strong",[r._v("第三方软件")])]),r._v(" "),_("p",[r._v("开源的Docker Registry镜像只提供Docker Registry API的服务端实现，足以支持docker命令，但不含图像界面，镜像维护，用户管理，访问控制等功能。")]),r._v(" "),_("p",[r._v("第三方软件实现的Docker Registry API提供包括用户界面以及一些高级功能。如Harbor和Sonatype Nexus。")])])}),[],!1,null,null,null);v.default=o.exports}}]);